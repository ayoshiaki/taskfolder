#!/usr/bin/env python

import argparse
import re
import os
import subprocess
import json
import yaml
from datetime import datetime
from pathlib import Path

HOME = Path.home()
TODO_DIR = HOME / "work" / "todo"
ARCHIVE_DIR = HOME / "work" / "archive"

def load_task_info(number):
    try:
        text = subprocess.check_output(['task', str(number), 'info'], text=True)
        data = yaml.safe_load(text)
        return data
    except subprocess.CalledProcessError as e:
        print(f"Error loading task info: {e}")
        return None

def create(number):
    today = datetime.now().strftime('%Y%m%d')
    info = load_task_info(number)
    if not info:
        return

    uuid = info.get('uuid', '')
    folder_name = f"{today}-{uuid.split('-')[0]}"
    folder_path = TODO_DIR / folder_name

    if not folder_path.exists():
        folder_path.mkdir(parents=True)
        print(f"Created folder: {folder_path}")
        subprocess.run(['task', str(number), 'annotate', str(folder_path)])
        print(f"Annotated task {number} with folder path: {folder_path}")
    else:
        print(f"Folder already exists: {folder_path}")

def open_folder(number):
    info = load_task_info(number)
    if not info:
        return

    annotations = info.get("annotations", [])
    path_pattern = re.compile(r'(/[^\s]+/\d{8}-[0-9a-fA-F]{8})')
    for ann in annotations:
        match = path_pattern.search(ann.get('description', ''))
        if match:
            folder_path = Path(match.group(1))
            if folder_path.exists():
                subprocess.run(['open', str(folder_path)])
                print(f"Opened folder: {folder_path}")
                return
    print(f"No folder found or does not exist for task {number}.")

def get_folder(number):
    info = load_task_info(number)
    if not info:
        return

    path_pattern = re.compile(r'(/[^\s]+/\d{8}-[0-9a-fA-F]{8})')
    for ann in info.get("annotations", []):
        match = path_pattern.search(ann.get("description", ""))
        if match:
            print(match.group(1))
            return
    print(f"No folder annotation found for task {number}.")

def archive_folder(number):
    info = load_task_info(number)
    if not info:
        return

    path_pattern = re.compile(r'(/[^\s]+/\d{8}-[0-9a-fA-F]{8})')
    for ann in info.get("annotations", []):
        match = path_pattern.search(ann.get("description", ""))
        if match:
            folder_path_from = Path(match.group(1))
            folder_name = folder_path_from.name
            folder_path_to = ARCHIVE_DIR / folder_name

            if not folder_path_from.exists():
                print(f"Folder {folder_path_from} does not exist.")
                return

            if not any(folder_path_from.iterdir()):
                folder_path_from.rmdir()
                print(f"Deleted empty folder: {folder_path_from}")
                return

            try:
                folder_path_from.rename(folder_path_to)
                print(f"Moved folder from {folder_path_from} to {folder_path_to}")
                return
            except OSError as e:
                print(f"Error moving folder: {e}")
                return

    print(f"No folder annotation found for task {number}.")

def list_folders():
    folder_pattern = re.compile(r'[0-9]{8}-[0-9a-fA-F]{8}')
    folder_to_description = {}

    try:
        export_text = subprocess.check_output(['task', 'export'], text=True)
        tasks = yaml.safe_load(export_text)
    except Exception as e:
        print(f"[Error] Could not load task export: {e}")
        tasks = []

    for task in tasks:
        annotations = task.get("annotations", [])
        description = task.get("description", "No description")
        for ann in annotations:
            match = folder_pattern.search(ann.get("description", ""))
            if match:
                folder_to_description[match.group(0)] = description

    print(f"\nListing folders in: {TODO_DIR}")
    try:
        folders = sorted(f.name for f in TODO_DIR.iterdir() if folder_pattern.fullmatch(f.name))
        if not folders:
            print(" (no folders found)")
            return
        for folder in folders:
            print(f" - {folder}")
            description = folder_to_description.get(folder)
            if description:
                print(f"    â†’ {description}")
    except FileNotFoundError:
        print(f"Directory not found: {TODO_DIR}")

def main():
    parser = argparse.ArgumentParser(description="Taskwarrior folder manager (v3.3 compatible)")
    subparsers = parser.add_subparsers(dest='command', required=True)

    p_create = subparsers.add_parser('create', help='Create folder for task')
    p_create.add_argument('number', type=str)

    p_open = subparsers.add_parser('open', help='Open folder for task')
    p_open.add_argument('number', type=str)

    p_archive = subparsers.add_parser('archive', help='Archive folder for task')
    p_archive.add_argument('number', type=str)

    p_get = subparsers.add_parser('get', help='Get folder path')
    p_get.add_argument('number', type=str)

    subparsers.add_parser('list', help='List folders with task descriptions')

    args = parser.parse_args()

    if args.command == 'create':
        create(args.number)
    elif args.command == 'open':
        open_folder(args.number)
    elif args.command == 'archive':
        archive_folder(args.number)
    elif args.command == 'get':
        get_folder(args.number)
    elif args.command == 'list':
        list_folders()

if __name__ == "__main__":
    main()

